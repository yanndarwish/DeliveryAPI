/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/deliveries": {
    /** Returns a list of deliveries. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by driver name
           * @example Brown, Bob
           */
          driver?: string;
          /**
           * @description Filter by provider name
           * @example Amazon
           */
          provider?: string;
          /**
           * @description Filter by vehicle name
           * @example Honda Accord
           */
          vehicle?: string;
          /**
           * @description Filter by day
           * @example 1
           */
          day?: string;
          /**
           * @description Filter by month
           * @example 7
           */
          month?: string;
          /**
           * @description Filter by year
           * @example 2024
           */
          year?: string;
        };
      };
      responses: {
        /** @description A JSON array of deliveries */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["DeliveriesArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Creates a new delivery. */
    post: {
      /** @description Delivery object to be added to the list */
      requestBody: {
        content: {
          "application/json": components["schemas"]["DeliveryCreate"];
        };
      };
      responses: {
        /** @description Delivery created */
        201: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/deliveries/{id}": {
    /** Returns a delivery by id. */
    get: {
      parameters: {
        path: {
          /** @description The id of the delivery to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description A delivery object */
        200: {
          content: {
            "application/json": components["schemas"]["Delivery"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Delivery not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Updates a delivery by id. */
    put: {
      parameters: {
        path: {
          /** @description The id of the delivery to update */
          id: string;
        };
      };
      /** @description Delivery object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["DeliveryUpdate"];
        };
      };
      responses: {
        /** @description Delivery updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Delivery not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Deletes a delivery by id. */
    delete: {
      parameters: {
        path: {
          /** @description The id of the delivery to delete */
          id: string;
        };
      };
      responses: {
        /** @description Delivery deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Delivery not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/clients": {
    /** Returns a list of clients. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by client active status
           * @example ACTIVE
           */
          status?: components["schemas"]["ActiveStatus"];
          /**
           * @description Filter by client name
           * @example Amazon
           */
          name?: string;
          /**
           * @description Filter by city name
           * @example Paris
           */
          city?: string;
          /**
           * @description Filter by postal code
           * @example 75008
           */
          postalCode?: string;
          /**
           * @description Filter by country
           * @example France
           */
          country?: string;
        };
      };
      responses: {
        /** @description A JSON array of clients */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["ClientsArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Creates a new client. */
    post: {
      /** @description Client object to be added to the list */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientCreate"];
        };
      };
      responses: {
        /** @description Client created */
        201: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/clients/{id}": {
    /** Returns a client by id. */
    get: {
      parameters: {
        path: {
          /** @description The id of the client to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description A client object */
        200: {
          content: {
            "application/json": components["schemas"]["Client"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Client not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Updates a client by id. */
    put: {
      parameters: {
        path: {
          /** @description The id of the client to update */
          id: string;
        };
      };
      /** @description Client object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ClientUpdate"];
        };
      };
      responses: {
        /** @description Client updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Client not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Deletes a client by id. */
    delete: {
      parameters: {
        path: {
          /** @description The id of the client to delete */
          id: string;
        };
      };
      responses: {
        /** @description Client deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Client not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/relays": {
    /** Returns a list of relays. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by relay active status
           * @example ACTIVE
           */
          status?: components["schemas"]["ActiveStatus"];
          /**
           * @description Filter by relay name
           * @example Amazon
           */
          name?: string;
          /**
           * @description Filter by city name
           * @example Paris
           */
          city?: string;
          /**
           * @description Filter by postal code
           * @example 75008
           */
          postalCode?: string;
          /**
           * @description Filter by country
           * @example France
           */
          country?: string;
        };
      };
      responses: {
        /** @description A JSON array of relays */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["RelaysArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Creates a new relay. */
    post: {
      /** @description Relay object to be added to the list */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RelayCreate"];
        };
      };
      responses: {
        /** @description Relay created */
        201: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/relays/{id}": {
    /** Returns a relay by id. */
    get: {
      parameters: {
        path: {
          /** @description The id of the relay to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description A relay object */
        200: {
          content: {
            "application/json": components["schemas"]["Relay"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Relay not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Updates a relay by id. */
    put: {
      parameters: {
        path: {
          /** @description The id of the relay to update */
          id: string;
        };
      };
      /** @description Relay object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["RelayUpdate"];
        };
      };
      responses: {
        /** @description Relay updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Relay not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Deletes a relay by id. */
    delete: {
      parameters: {
        path: {
          /** @description The id of the relay to delete */
          id: string;
        };
      };
      responses: {
        /** @description Relay deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Relay not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/drivers": {
    /** Returns a list of drivers. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by driver active status
           * @example ACTIVE
           */
          status?: components["schemas"]["ActiveStatus"];
          /**
           * @description Filter by driver first name
           * @example Bob
           */
          firstName?: string;
          /**
           * @description Filter by driver last name
           * @example Brown
           */
          lastName?: string;
          /**
           * @description Filter by driver email
           * @example example@mail.com
           */
          email?: string;
          /**
           * @description Filter by driver phone
           * @example 612345678
           */
          phone?: string;
        };
      };
      responses: {
        /** @description A JSON array of drivers */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["DriversArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Creates a new driver. */
    post: {
      /** @description Driver object to be added to the list */
      requestBody: {
        content: {
          "application/json": components["schemas"]["DriverCreate"];
        };
      };
      responses: {
        /** @description Driver created */
        201: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/drivers/{id}": {
    /** Returns a driver by id. */
    get: {
      parameters: {
        path: {
          /** @description The id of the driver to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description A driver object */
        200: {
          content: {
            "application/json": components["schemas"]["Driver"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Driver not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Updates a driver by id. */
    put: {
      parameters: {
        path: {
          /** @description The id of the driver to update */
          id: string;
        };
      };
      /** @description Driver object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["DriverUpdate"];
        };
      };
      responses: {
        /** @description Driver updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Driver not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Deletes a driver by id. */
    delete: {
      parameters: {
        path: {
          /** @description The id of the driver to delete */
          id: string;
        };
      };
      responses: {
        /** @description Driver deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Driver not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/vehicles": {
    /** Returns a list of vehicles. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by vehicle active status
           * @example ACTIVE
           */
          status?: components["schemas"]["ActiveStatus"];
          /**
           * @description Filter by vehicle brand
           * @example Honda
           */
          brand?: string;
          /**
           * @description Filter by vehicle model
           * @example Accord
           */
          model?: string;
          /**
           * @description Filter by vehicle immatriculation
           * @example 123ABC75
           */
          immatriculation?: string;
        };
      };
      responses: {
        /** @description A JSON array of vehicles */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["VehiclesArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Creates a new vehicle. */
    post: {
      /** @description Vehicle object to be added to the list */
      requestBody: {
        content: {
          "application/json": components["schemas"]["VehicleCreate"];
        };
      };
      responses: {
        /** @description Vehicle created */
        201: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/vehicles/{id}": {
    /** Returns a vehicle by id. */
    get: {
      parameters: {
        path: {
          /** @description The id of the vehicle to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description A vehicle object */
        200: {
          content: {
            "application/json": components["schemas"]["Vehicle"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Vehicle not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Updates a vehicle by id. */
    put: {
      parameters: {
        path: {
          /** @description The id of the vehicle to update */
          id: string;
        };
      };
      /** @description Vehicle object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["VehicleUpdate"];
        };
      };
      responses: {
        /** @description Vehicle updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Vehicle not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Deletes a vehicle by id. */
    delete: {
      parameters: {
        path: {
          /** @description The id of the vehicle to delete */
          id: string;
        };
      };
      responses: {
        /** @description Vehicle deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Vehicle not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tours": {
    /** Returns a list of tours. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by tour active status
           * @example ACTIVE
           */
          status?: components["schemas"]["ActiveStatus"];
          /**
           * @description Filter by tour name
           * @example Tour N°1
           */
          name?: string;
        };
      };
      responses: {
        /** @description A JSON array of tours */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["ToursArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Creates a new tour. */
    post: {
      /** @description Tour object to be added to the list */
      requestBody: {
        content: {
          "application/json": components["schemas"]["TourCreate"];
        };
      };
      responses: {
        /** @description Tour created */
        201: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tours/{id}": {
    /** Returns a tour by id. */
    get: {
      parameters: {
        path: {
          /** @description The id of the tour to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description A tour object */
        200: {
          content: {
            "application/json": components["schemas"]["Tour"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Tour not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Updates a tour by id. */
    put: {
      parameters: {
        path: {
          /** @description The id of the tour to update */
          id: string;
        };
      };
      /** @description Tour object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["TourUpdate"];
        };
      };
      responses: {
        /** @description Tour updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Tour not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Deletes a tour by id. */
    delete: {
      parameters: {
        path: {
          /** @description The id of the tour to delete */
          id: string;
        };
      };
      responses: {
        /** @description Tour deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Tour not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tours/{tourId}/members": {
    /** Returns a list of members for a tour. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by member active status
           * @example ACTIVE
           */
          status?: components["schemas"]["ActiveStatus"];
        };
        path: {
          /** @description The id of the tour to retrieve members from */
          tourId: string;
        };
      };
      responses: {
        /** @description A JSON array of members */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["TourMembersArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tours/{tourId}/active-members": {
    /** Returns a list of active members for a tour on a specific date. */
    get: {
      parameters: {
        query: {
          /**
           * @description Filter by date
           * @example "2021-07-01T00:00:00.000Z"
           */
          date: string;
        };
        path: {
          /** @description The id of the tour to retrieve members from */
          tourId: string;
        };
      };
      responses: {
        /** @description A JSON array of active members */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["TourMembersArray"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tours/{tourId}/members/{id}": {
    /** Returns a member by id for a tour. */
    get: {
      parameters: {
        path: {
          /** @description The id of the tour to retrieve the member from */
          tourId: string;
          /** @description The id of the member to retrieve */
          id: string;
        };
      };
      responses: {
        /** @description A member object */
        200: {
          content: {
            "application/json": components["schemas"]["TourMember"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Member not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Updates a member's status for a tour. */
    put: {
      parameters: {
        path: {
          /** @description The id of the tour to retrieve the member from */
          tourId: string;
          /** @description The id of the member to update */
          id: string;
        };
      };
      /** @description Member object to be updated */
      requestBody: {
        content: {
          "application/json": components["schemas"]["TourMemberUpdate"];
        };
      };
      responses: {
        /** @description Member updated */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Member not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Deletes a member by id for a tour. */
    delete: {
      parameters: {
        path: {
          /** @description The id of the tour to retrieve the member from */
          tourId: string;
          /** @description The id of the member to delete */
          id: string;
        };
      };
      responses: {
        /** @description Member deleted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Member not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/companies": {
    /** Returns a list of companies. */
    get: {
      parameters: {
        query: {
          offset: components["parameters"]["OffsetParam"];
          limit: components["parameters"]["LimitParam"];
          /**
           * @description Filter by company active status
           * @example ACTIVE
           */
          status?: components["schemas"]["ActiveStatus"];
          /**
           * @description Filter by company name
           * @example Amazon
           */
          name?: string;
          /**
           * @description Filter by company siret
           * @example 12345678901234
           */
          siret?: string;
          /**
           * @description Filter by company email
           * @example example@mail.com
           */
          email?: string;
        };
      };
      responses: {
        /** @description A JSON array of companies */
        200: {
          content: {
            "application/json": {
              data: components["schemas"]["CompaniesArray"];
              pagination: components["schemas"]["Pagination"];
            };
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Creates a new company. */
    post: {
      /** @description Company object to be added to the list */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CompanyCreate"];
        };
      };
      responses: {
        /** @description Company created */
        201: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
        /** @description Bad request - validation error */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    MessageResponse: {
      /** @example Success */
      message: string;
    };
    Pagination: {
      /** @example 1 */
      currentPage?: number;
      /** @example 7 */
      totalPages?: number;
      /** @example true */
      hasNextPage?: boolean;
      /** @example false */
      hasPreviousPage?: boolean;
      /** @example 89 */
      totalItems?: number;
    };
    /**
     * @description The type of the entity (in UPPERCASE)
     * @enum {string}
     */
    PickupEntities: "CLIENT" | "RELAY";
    /**
     * @description The active status of the entity (in UPPERCASE)
     * @enum {string}
     */
    ActiveStatus: "ACTIVE" | "INACTIVE";
    /** @example 1 */
    Id: number;
    /**
     * @example [
     *   1,
     *   2
     * ]
     */
    ClientIds: components["schemas"]["Id"][];
    Delivery: {
      /**
       * @description The id of the delivery
       * @example 1
       */
      id: number;
      /**
       * @description The name of the driver (Lastname, Firstname)
       * @example Smith, John
       */
      driver: string;
      /**
       * @description The name of the vehicle (Brand Model)
       * @example Ford Transit
       */
      vehicle: string;
      /**
       * @description The name of the company that provided the delivery
       * @example Amazon
       */
      provider: string;
      /**
       * @description The price of the hotel, in euros
       * @example 100
       */
      hotelPrice: number | null;
      /**
       * @description The name of the company that outsourced the delivery
       * @example Google
       */
      outsourcedTo: string | null;
      /**
       * @description Array of pickups
       * @example [
       *   {
       *     "date": "2021-07-01",
       *     "infos": {
       *       "id": 1,
       *       "name": "Amazon",
       *       "streetNumber": 123,
       *       "street": "Main St",
       *       "city": "Paris",
       *       "postalCode": 75008,
       *       "country": "France",
       *       "comment": "Derrière le hangar",
       *       "active": true,
       *       "type": "CLIENT"
       *     }
       *   }
       * ]
       */
      pickups: components["schemas"]["Pickup"][];
      /**
       * @description Array of dropoffs
       * @example [
       *   {
       *     "date": "2021-07-01",
       *     "infos": {
       *       "id": 1,
       *       "name": "Amazon",
       *       "streetNumber": 123,
       *       "street": "Main St",
       *       "city": "Paris",
       *       "postalCode": 75008,
       *       "country": "France",
       *       "comment": "Derrière le hangar",
       *       "active": true,
       *       "type": "CLIENT"
       *     }
       *   }
       * ]
       */
      dropoffs: components["schemas"]["Pickup"][];
      /**
       * @description The id of the company that does the delivery
       * @example 1
       */
      companyId: number;
    };
    DeliveryCreate: {
      /**
       * @description The id of the driver that does the delivery
       * @example 1
       */
      driverId: number;
      /**
       * @description The id of the vehicle that does the delivery
       * @example 1
       */
      vehicleId: number;
      /**
       * @description The id of the company that provided the delivery
       * @example 1
       */
      providerId: number;
      /**
       * @description The price of the hotel, in euros
       * @example 100
       */
      hotelPrice?: number;
      /**
       * @description Array of pickups
       * @example [
       *   {
       *     "date": "2021-07-01",
       *     "entityId": 1,
       *     "entityType": "CLIENT"
       *   }
       * ]
       */
      pickups: components["schemas"]["PickupCreate"][];
      /**
       * @description Array of dropoffs
       * @example [
       *   {
       *     "date": "2021-07-01",
       *     "entityId": 1,
       *     "entityType": "CLIENT"
       *   }
       * ]
       */
      dropoffs: components["schemas"]["PickupCreate"][];
      /**
       * @description The id of the company that outsourced the delivery
       * @example 2
       */
      outsourcedTo?: number;
    };
    DeliveryUpdate: {
      /**
       * @description The id of the driver that does the delivery
       * @example 1
       */
      driverId: number;
      /**
       * @description The id of the vehicle that does the delivery
       * @example 1
       */
      vehicleId: number;
      /**
       * @description The id of the company that provided the delivery
       * @example 1
       */
      providerId: number;
      /**
       * @description The price of the hotel, in euros
       * @example 100
       */
      hotelPrice: number | null;
      /**
       * @description Array of pickups
       * @example [
       *   {
       *     "date": "2021-07-01",
       *     "entityId": 1,
       *     "entityType": "CLIENT"
       *   }
       * ]
       */
      pickups: components["schemas"]["PickupCreate"][];
      /**
       * @description Array of dropoffs
       * @example [
       *   {
       *     "date": "2021-07-01",
       *     "entityId": 1,
       *     "entityType": "CLIENT"
       *   }
       * ]
       */
      dropoffs: components["schemas"]["PickupCreate"][];
      /**
       * @description The id of the company that outsourced the delivery
       * @example 2
       */
      outsourcedTo: number | null;
    };
    DeliveriesArray: components["schemas"]["Delivery"][];
    Pickup: {
      /** @example 2021-07-01 */
      date: string;
      infos: {
        /** @example 1 */
        id: number;
        /** @example Amazon */
        name: string;
        /** @example 123 */
        streetNumber: string | null;
        /** @example Main St */
        street: string;
        /** @example Paris */
        city: string;
        /** @example 75008 */
        postalCode: string | null;
        /** @example France */
        country: string;
        /** @example Derrière le hangar */
        comment: string | null;
        /** @example true */
        active: boolean;
        /**
         * @description The type of the entity (in UPPERCASE)
         * @example CLIENT
         */
        type: string;
      };
    };
    PickupCreate: {
      /** @example 2021-07-01 */
      date?: string;
      /** @example 1 */
      entityId?: number;
      entityType?: components["schemas"]["PickupEntities"];
    };
    Client: {
      /**
       * @description The id of the client
       * @example 1
       */
      id: number;
      /**
       * @description The name of the client
       * @example Amazon
       */
      name: string;
      /**
       * @description The street number of the client
       * @example 123
       */
      streetNumber: string | null;
      /**
       * @description The street of the client
       * @example Main St
       */
      street: string;
      /**
       * @description The city of the client
       * @example Paris
       */
      city: string;
      /**
       * @description The postal code of the client
       * @example 75008
       */
      postalCode: string | null;
      /**
       * @description The country of the client
       * @example France
       */
      country: string;
      /**
       * @description The comment of the client
       * @example Derrière le hangar
       */
      comment: string | null;
      /**
       * @description The active status of the client
       * @example true
       */
      active: boolean;
      /**
       * @description The phone number of the client
       * @example 33612345678
       */
      phone: string | null;
      /**
       * @description The email of the client
       * @example example@mail.com
       */
      email: string | null;
    };
    ClientsArray: components["schemas"]["Client"][];
    ClientCreate: {
      /**
       * @description The name of the client
       * @example Amazon
       */
      name: string;
      /**
       * @description The street number of the client
       * @example 123
       */
      streetNumber?: string;
      /**
       * @description The street of the client
       * @example Main St
       */
      street: string;
      /**
       * @description The city of the client
       * @example Paris
       */
      city: string;
      /**
       * @description The postal code of the client
       * @example 75008
       */
      postalCode?: string;
      /**
       * @description The country of the client
       * @example France
       */
      country: string;
      /**
       * @description The comment of the client
       * @example Derrière le hangar
       */
      comment?: string;
      /**
       * @description The active status of the client
       * @example true
       */
      active: boolean;
      /**
       * @description The phone number of the client
       * @example 33612345678
       */
      phone?: string;
      /**
       * @description The email of the client
       * @example example@mail.com
       */
      email?: string;
    };
    ClientUpdate: {
      /**
       * @description The name of the client
       * @example Amazon
       */
      name: string;
      /**
       * @description The street number of the client
       * @example 123
       */
      streetNumber: string | null;
      /**
       * @description The street of the client
       * @example Main St
       */
      street: string;
      /**
       * @description The city of the client
       * @example Paris
       */
      city: string;
      /**
       * @description The postal code of the client
       * @example 75008
       */
      postalCode: string | null;
      /**
       * @description The country of the client
       * @example France
       */
      country: string;
      /**
       * @description The comment of the client
       * @example Derrière le hangar
       */
      comment: string | null;
      /**
       * @description The active status of the client
       * @example true
       */
      active: boolean;
      /**
       * @description The phone number of the client
       * @example 33612345678
       */
      phone: string | null;
      /**
       * @description The email of the client
       * @example example@mail.com
       */
      email: string | null;
    };
    Relay: {
      /**
       * @description The id of the relay
       * @example 1
       */
      id: number;
      /**
       * @description The name of the relay
       * @example Amazon
       */
      name: string;
      /**
       * @description The street number of the relay
       * @example 123
       */
      streetNumber: string | null;
      /**
       * @description The street of the relay
       * @example Main St
       */
      street: string;
      /**
       * @description The city of the relay
       * @example Paris
       */
      city: string;
      /**
       * @description The postal code of the relay
       * @example 75008
       */
      postalCode: string | null;
      /**
       * @description The country of the relay
       * @example France
       */
      country: string;
      /**
       * @description The comment of the relay
       * @example Derrière le hangar
       */
      comment: string | null;
      /**
       * @description The active status of the relay
       * @example true
       */
      active: boolean;
    };
    RelaysArray: components["schemas"]["Relay"][];
    RelayCreate: {
      /**
       * @description The name of the relay
       * @example Amazon
       */
      name: string;
      /**
       * @description The street number of the relay
       * @example 123
       */
      streetNumber?: string;
      /**
       * @description The street of the relay
       * @example Main St
       */
      street: string;
      /**
       * @description The city of the relay
       * @example Paris
       */
      city: string;
      /**
       * @description The postal code of the relay
       * @example 75008
       */
      postalCode?: string;
      /**
       * @description The country of the relay
       * @example France
       */
      country: string;
      /**
       * @description The comment of the relay
       * @example Derrière le hangar
       */
      comment?: string;
      /**
       * @description The active status of the relay
       * @example true
       */
      active: boolean;
    };
    RelayUpdate: {
      /**
       * @description The name of the relay
       * @example Amazon
       */
      name: string;
      /**
       * @description The street number of the relay
       * @example 123
       */
      streetNumber: string | null;
      /**
       * @description The street of the relay
       * @example Main St
       */
      street: string;
      /**
       * @description The city of the relay
       * @example Paris
       */
      city: string;
      /**
       * @description The postal code of the relay
       * @example 75008
       */
      postalCode: string | null;
      /**
       * @description The country of the relay
       * @example France
       */
      country: string;
      /**
       * @description The comment of the relay
       * @example Derrière le hangar
       */
      comment: string | null;
      /**
       * @description The active status of the relay
       * @example true
       */
      active: boolean;
    };
    Driver: {
      /**
       * @description The id of the driver
       * @example 1
       */
      id: number;
      /**
       * @description The first name of the driver
       * @example Bob
       */
      firstName: string;
      /**
       * @description The last name of the driver
       * @example Brown
       */
      lastName: string;
      /**
       * @description The status of the driver
       * @example true
       */
      active: boolean;
      /**
       * @description The email of the driver
       * @example example@mail.com
       */
      email: string | null;
      /**
       * @description The phone number of the driver
       * @example 33612345678
       */
      phone: string | null;
    };
    DriversArray: components["schemas"]["Driver"][];
    DriverCreate: {
      /**
       * @description The first name of the driver
       * @example Bob
       */
      firstName: string;
      /**
       * @description The last name of the driver
       * @example Brown
       */
      lastName: string;
      /**
       * @description The status of the driver
       * @example true
       */
      active: boolean;
      /**
       * @description The email of the driver
       * @example example@mail.com
       */
      email: string | null;
      /**
       * @description The phone number of the driver
       * @example 33612345678
       */
      phone: string | null;
    };
    DriverUpdate: components["schemas"]["DriverCreate"];
    Vehicle: {
      /**
       * @description The id of the vehicle
       * @example 1
       */
      id: number;
      /**
       * @description The brand of the vehicle
       * @example Honda
       */
      brand: string;
      /**
       * @description The model of the vehicle
       * @example Accord
       */
      model: string;
      /**
       * @description The immatriculation of the vehicle
       * @example 123ABC75
       */
      immatriculation: string;
      /**
       * @description The status of the vehicle
       * @example true
       */
      active: boolean;
    };
    VehiclesArray: components["schemas"]["Vehicle"][];
    VehicleCreate: {
      /**
       * @description The brand of the vehicle
       * @example Honda
       */
      brand: string;
      /**
       * @description The model of the vehicle
       * @example Accord
       */
      model: string;
      /**
       * @description The immatriculation of the vehicle
       * @example 123ABC75
       */
      immatriculation: string;
      /**
       * @description The status of the vehicle
       * @example true
       */
      active: boolean;
    };
    VehicleUpdate: components["schemas"]["VehicleCreate"];
    Tour: {
      /**
       * @description The id of the tour
       * @example 1
       */
      id: number;
      /**
       * @description The name of the tour
       * @example Tour N°1
       */
      name: string;
      /**
       * @description The status of the tour
       * @example true
       */
      active: boolean;
    };
    ToursArray: components["schemas"]["Tour"][];
    TourCreate: {
      /**
       * @description The name of the tour
       * @example Tour N°1
       */
      name: string;
      /**
       * @description The status of the tour
       * @example true
       */
      active: boolean;
      clientIds: components["schemas"]["ClientIds"];
    };
    TourUpdate: components["schemas"]["TourCreate"];
    TourMember: {
      /**
       * @description The id of the tour member
       * @example 1
       */
      id: number;
      /**
       * @description The id of the tour
       * @example 1
       */
      tourId: number;
      /**
       * @description The name of the tour
       * @example Tour N°1
       */
      tourName: string;
      /**
       * @description The id of the client
       * @example 1
       */
      clientId: number;
      /**
       * @description The name of the client
       * @example Amazon
       */
      clientName: string;
      /**
       * @description The street number of the client
       * @example 123
       */
      streetNumber: string | null;
      /**
       * @description The street of the client
       * @example Main St
       */
      streetName: string;
      /**
       * @description The city of the client
       * @example Paris
       */
      city: string;
      /**
       * @description The postal code of the client
       * @example 75008
       */
      postalCode: string | null;
      /**
       * @description The country of the client
       * @example France
       */
      country: string;
      /**
       * @description The active status of the tour member
       * @example true
       */
      active: boolean;
    };
    TourMembersArray: components["schemas"]["TourMember"][];
    TourMemberUpdate: {
      /**
       * @description The active status of the tour member
       * @example true
       */
      active: boolean;
    };
    Company: {
      /**
       * @description The id of the company
       * @example 1
       */
      id: number;
      /**
       * @description The name of the company
       * @example Amazon
       */
      name: string;
      /**
       * @description The siret of the company
       * @example 12345678901234
       */
      siret: string;
      headquarters: components["schemas"]["Address"];
      warehouse: components["schemas"]["Address"];
      /**
       * @description The email of the company
       * @example example@mail.com
       */
      email: string | null;
      /**
       * @description The phone number of the company
       * @example 33612345678
       */
      phone: string | null;
      contacts: components["schemas"]["ContactsArray"];
      /**
       * @description The active status of the company
       * @example true
       */
      active: boolean;
    };
    CompaniesArray: components["schemas"]["Company"][];
    Address: {
      /**
       * @description The id of the address
       * @example 1
       */
      id: number | null;
      /**
       * @description The street number of the address
       * @example 123
       */
      streetNumber: string | null;
      /**
       * @description The street of the address
       * @example Main St
       */
      streetName: string | null;
      /**
       * @description The city of the address
       * @example Paris
       */
      city: string | null;
      /**
       * @description The postal code of the address
       * @example 75008
       */
      postalCode: string | null;
      /**
       * @description The country of the address
       * @example France
       */
      country: string | null;
    };
    AddressCreate: {
      /**
       * @description The street number of the address
       * @example 123
       */
      streetNumber: string | null;
      /**
       * @description The street of the address
       * @example Main St
       */
      streetName: string | null;
      /**
       * @description The city of the address
       * @example Paris
       */
      city: string | null;
      /**
       * @description The postal code of the address
       * @example 75008
       */
      postalCode: string | null;
      /**
       * @description The country of the address
       * @example France
       */
      country: string | null;
      /**
       * @description The comment of the address
       * @example Derrière le hangar
       */
      comment?: string | null;
    };
    Contact: {
      /**
       * @description The id of the contact
       * @example 1
       */
      id?: number;
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName?: string;
      /**
       * @description The last name of the contact
       * @example Smith
       */
      lastName?: string;
      /**
       * @description The email of the contact
       * @example example@mail.com
       */
      email?: string | null;
      /**
       * @description The phone number of the contact
       * @example 33612345678
       */
      phone?: string | null;
      /**
       * @description The comment of the contact
       * @example CEO
       */
      comment?: string | null;
    };
    ContactsArray: components["schemas"]["Contact"][];
    ContactCreate: {
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string;
      /**
       * @description The last name of the contact
       * @example Smith
       */
      lastName: string;
      /**
       * @description The email of the contact
       * @example example@mail.com
       */
      email: string | null;
      /**
       * @description The phone number of the contact
       * @example 33612345678
       */
      phone: string | null;
      /**
       * @description The comment of the contact
       * @example CEO
       */
      comment?: string | null;
    };
    ContactCreateArray: components["schemas"]["ContactCreate"][];
    CompanyCreate: {
      /**
       * @description The name of the company
       * @example Amazon
       */
      name: string;
      /**
       * @description The siret of the company
       * @example 12345678901234
       */
      siret: string;
      headquarters?: components["schemas"]["AddressCreate"];
      warehouse?: components["schemas"]["AddressCreate"];
      /**
       * @description The email of the company
       * @example example@mail.com
       */
      email: string | null;
      /**
       * @description The phone number of the company
       * @example 33612345678
       */
      phone: string | null;
      /**
       * @description The active status of the company
       * @example true
       */
      active: boolean;
      contacts: components["schemas"]["ContactCreateArray"];
    };
  };
  responses: never;
  parameters: {
    /** @description Number of items to skip */
    OffsetParam: string;
    /** @description Number of items to return */
    LimitParam: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
