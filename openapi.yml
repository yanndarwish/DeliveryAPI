openapi: 3.0.0
info:
  title: Delivery app API
  description: Endpoints for the delivery app
  version: 0.1.9

servers:
  - url: http://localhost:3000
    description: Local environment

paths:
  ############# DELIVERIES #################
  /deliveries:
    get:
      summary: Returns a list of deliveries.
      tags:
        - "Deliveries"
      parameters:
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - in: query
          name: driver
          description: Filter by driver name
          example: Brown, Bob
          schema:
            type: string
        - in: query
          name: provider
          example: Amazon
          description: Filter by provider name
          schema:
            type: string
        - in: query
          name: vehicle
          example: Honda Accord
          description: Filter by vehicle name
          schema:
            type: string
        - in: query
          name: day
          example: 1
          description: Filter by day
          schema:
            type: string
        - in: query
          name: month
          example: 7
          description: Filter by month
          schema:
            type: string
        - in: query
          name: year
          example: 2024
          description: Filter by year
          schema:
            type: string
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/DeliveriesArray"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                required:
                  - data
                  - pagination
        "400":
          description: Bad request - validation error
        "500":
          description: Internal server error
    post:
      summary: Creates a new delivery.
      tags:
        - "Deliveries"
      requestBody:
        description: Delivery object to be added to the list
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryCreate"
      responses:
        "201":
          description: Delivery created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Bad request - validation error
        "500":
          description: Internal server error

  /deliveries/{id}:
    get:
      summary: Returns a delivery by id.
      tags:
        - "Deliveries"
      parameters:
        - in: path
          name: id
          description: The id of the delivery to retrieve
          required: true
          schema:
            type: string
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delivery"
        "400":
          description: Bad request - validation error
        "404":
          description: Delivery not found
        "500":
          description: Internal server error

    put:
      summary: Updates a delivery by id.
      tags:
        - "Deliveries"
      parameters:
        - in: path
          name: id
          description: The id of the delivery to update
          required: true
          schema:
            type: string
      requestBody:
        description: Delivery object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryCreate"
      responses:
        "200": # status code
          description: Delivery updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Bad request - validation error
        "404":
          description: Delivery not found
        "500":
          description: Internal server error

    delete:
      summary: Deletes a delivery by id.
      tags:
        - "Deliveries"
      parameters:
        - in: path
          name: id
          description: The id of the delivery to delete
          required: true
          schema:
            type: string
      responses:
        "200": # status code
          description: Delivery deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Bad request - validation error
        "404":
          description: Delivery not found
        "500":
          description: Internal server error
  
  ############# CLIENTS #################
  /clients:
    get:
      summary: Returns a list of clients.
      tags:
        - "Clients"
      parameters:
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/LimitParam"
        - in: query
          name: status
          description: Filter by client active status
          example: ACTIVE
          schema:
            $ref: "#/components/schemas/ActiveStatus"
        - in: query
          name: name
          description: Filter by client name
          example: Amazon
          schema:
            type: string
        - in: query
          name: city
          example: Paris
          description: Filter by city name
          schema:
            type: string
        - in: query
          name: postalCode
          example: 75008
          description: Filter by postal code
          schema:
            type: string
        - in: query
          name: country
          example: France
          description: Filter by country
          schema:
            type: string
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ClientsArray"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                required:
                  - data
                  - pagination
        "400":
          description: Bad request - validation error
        "500":
          description: Internal server error
    post:
      summary: Creates a new client.
      tags:
        - "Clients"
      requestBody:
        description: Client object to be added to the list
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientCreate"
      responses:
        "201":
          description: Client created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: Bad request - validation error
        "500":
          description: Internal server error

components:
  ############# PARAMETERS #################
  parameters:
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      required: true
      schema:
        type: string
        minimum: 0
        default: 0
    LimitParam:
      name: limit
      in: query
      description: Number of items to return
      required: true
      schema:
        type: string
        minimum: 1
        maximum: 100
        default: 25
  schemas:
    ################ BASE RESPONSE ###################
    # Message response
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: Success

    ############# PAGINATION #########################
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 7
        hasNextPage:
          type: boolean
          example: true
        hasPreviousPage:
          type: boolean
          example: false
        totalItems:
          type: integer
          example: 89
    
    ############# ENUMS #################
    # Pickup entities
    PickupEntities:
      type: string
      description: The type of the entity (in UPPERCASE)
      enum:
        - CLIENT
        - RELAY
    
    # Active status
    ActiveStatus:
      type: string
      description: The active status of the entity (in UPPERCASE)
      enum:
        - ACTIVE
        - INACTIVE

    ############# DELIVERIES SCHEMAS #################
    # Base delivery schema
    Delivery:
      type: object
      properties:
        id:
          type: integer
          description: The id of the delivery
          example: 1
        driver:
          type: string
          description: The name of the driver (Lastname, Firstname)
          example: Smith, John
        vehicle:
          type: string
          description: The name of the vehicle (Brand Model)
          example: Ford Transit
        provider:
          type: string
          description: The name of the company that provided the delivery
          example: Amazon
        hotelPrice:
          type: integer
          description: The price of the hotel, in euros
          example: 100
        outsourcedTo:
          type: string
          description: The name of the company that outsourced the delivery
          example: Google
        pickups:
          type: array
          description: Array of pickups
          items:
            $ref: "#/components/schemas/Pickup"
          example:
            - date: "2021-07-01"
              infos:
                id: 1
                name: Amazon
                streetNumber: 123
                street: Main St
                city: Paris
                postalCode: 75008
                country: France
                comment: Derrière le hangar
                active: true
                type: CLIENT
        dropoffs:
          type: array
          description: Array of dropoffs
          items:
            $ref: "#/components/schemas/Pickup"
          example:
            - date: "2021-07-01"
              infos:
                id: 1
                name: Amazon
                streetNumber: 123
                street: Main St
                city: Paris
                postalCode: 75008
                country: France
                comment: Derrière le hangar
                active: true
                type: CLIENT
        companyId:
          type: integer
          description: The id of the company that does the delivery
          example: 1
      required:
        - id
        - driver
        - vehicle
        - provider
        - hotelPrice
        - outsourcedTo
        - pickups
        - dropoffs
        - companyId

    # Delivery creation body schema
    DeliveryCreate:
      type: object
      properties:
        driverId:
          type: integer
          description: The id of the driver that does the delivery
          example: 1
        vehicleId:
          type: integer
          description: The id of the vehicle that does the delivery
          example: 1
        providerId:
          type: integer
          description: The id of the company that provided the delivery
          example: 1
        hotelPrice:
          type: integer
          description: The price of the hotel, in euros
          example: 100
        pickups:
          type: array
          description: Array of pickups
          items:
            $ref: "#/components/schemas/PickupCreate"
          example:
            - date: "2021-07-01"
              entityId: 1
              entityType: CLIENT
        dropoffs:
          type: array
          description: Array of dropoffs
          items:
            $ref: "#/components/schemas/PickupCreate"
          example:
            - date: "2021-07-01"
              entityId: 1
              entityType: CLIENT
        outsourcedTo:
          type: integer
          description: The id of the company that outsourced the delivery
          example: 2
      required:
        - driverId
        - vehicleId
        - providerId
        - pickups
        - dropoffs

    # Array of deliveries
    DeliveriesArray:
      type: array
      items:
        $ref: "#/components/schemas/Delivery"

    ############# PICKUPS SCHEMAS #################
    # Pickup schema
    Pickup:
      type: object
      properties:
        date:
          type: string
          example: "2021-07-01"
        infos:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: Amazon
            streetNumber:
              type: integer
              example: 123
            street:
              type: string
              example: Main St
            city:
              type: string
              example: Paris
            postalCode:
              type: string
              example: 75008
            country:
              type: string
              example: France
            comment:
              type: string
              example: Derrière le hangar
            active:
              type: boolean
              example: true
            type:
              type: string
              description: The type of the entity (in UPPERCASE)
              example: CLIENT
      required:
        - date
        - infos

    # Pickup creation body schema
    PickupCreate:
      type: object
      properties:
        date:
          type: string
          example: "2021-07-01"
        entityId:
          type: integer
          example: 1
        entityType:
          $ref: "#/components/schemas/PickupEntities"
  
    ############# CLIENTS SCHEMAS #################
    # Client schema
    Client:
      type: object
      properties:
        id:
          type: integer
          description: The id of the client
          example: 1
        name:
          type: string
          description: The name of the client
          example: Amazon
        streetNumber:
          type: string
          description: The street number of the client
          example: 123
        street:
          type: string
          description: The street of the client
          example: Main St
        city:
          type: string
          description: The city of the client
          example: Paris
        postalCode:
          type: string
          description: The postal code of the client
          example: 75008
        country:
          type: string
          description: The country of the client
          example: France
        comment:
          type: string
          description: The comment of the client
          example: Derrière le hangar
        active:
          type: boolean
          description: The active status of the client
          example: true
        phone:
          type: string
          description: The phone number of the client
          example: +33612345678
        email:
          type: string
          description: The email of the client
          example: example@mail.com
      required:
        - id
        - name
        - streetNumber
        - street
        - city
        - postalCode
        - country
        - active
        - phone
        - email
    
    # Clients array
    ClientsArray:
      type: array
      items:
        $ref: "#/components/schemas/Client"
    
    # Client creation body schema
    ClientCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of the client
          example: Amazon
        streetNumber:
          type: string
          description: The street number of the client
          example: 123
        street:
          type: string
          description: The street of the client
          example: Main St
        city:
          type: string
          description: The city of the client
          example: Paris
        postalCode:
          type: string
          description: The postal code of the client
          example: 75008
        country:
          type: string
          description: The country of the client
          example: France
        comment:
          type: string
          description: The comment of the client
          example: Derrière le hangar
        active:
          type: boolean
          description: The active status of the client
          example: true
        phone:
          type: string
          description: The phone number of the client
          example: +33612345678
        email:
          type: string
          description: The email of the client
          example: example@mail.com
      required:
        - name
        - streetNumber
        - street
        - city
        - postalCode
        - country
        - active
        - phone
        - email
    

